
	* 在项目开发的过程中，尽量不要用已经实现好的类，可以继承抽象类或者接口
	* 
对象多态性的核心本质：方法的覆写
	* 
若子类没有进行指定方法的覆写，也就不存在对象的多态性
	* 
若要对子类的方法做一些强制性的要求，就会用到抽象类
	* 
方法一时间想不到怎么被实现，或有意要子类去实现而定义某种标准，这个方法被定义为抽象。


一、抽象类的定义与使用
1、简单来想，抽象类只是在普通类的基础上扩充了一些抽象方法。(抽象方法指的是只声明而未实现的方法，即没有方法体)
2、抽象类中包含抽象方法，而抽象方法不包含方法体，所以抽象类不能产生实例化对象。
3、抽象类的使用原则
	* 
1）所有的抽象类必须有子类
	* 
2）抽象类的子类必须覆写抽象类所有的抽象方法，但子类不是抽象类，方法覆写需考虑权限问题。
	* 
3）抽象类的对象可以通过对象多态性利用子类为其实例化。
	* 
4）private与abstract不能同时使用


4、抽象类中允许提供构造方法，并且子类也会遵循对象实例化流程。实例化子类时一定先调用父类的构造方法。
注意：
	* 
1）抽象类中允许不定义任何的抽象方法，但是抽象类依然无法直接创建实例化对象。
	* 
2）final、private、static不能和abstract放在一起


              final：不可覆盖的。用final声明的类不允许有子类，但是抽象类必须有子类
              private：不可继承到子类，所以方法无法覆盖
              static：其修饰的方法为静态方法，可直接被类调用。但abstract修饰的方法没有方法体，不能够直接被调用。
	* 
3）有抽象方法的类一定是抽象类。但抽象类不一定都是抽象方法，也可以是具体方法。
	* 
4）父类是抽象类，其中由抽象方法，那么子类继承父类，并把父类中所有抽象方法都覆盖，子类才有创建对象的实例的能力，否则子类也必须是抽象类。(如果一个非抽象类继承了抽象类，那必须把抽象类中的方法全部实现)
	* 
5）抽象类中可以用构造方法，是子类在构造子类对象时需要调用父类(抽象类)的构造方法。
	* 
6）抽象类是不能创建对象的。因为抽象类存在抽象方法，如果能让抽象类创建对象的话，那么使用抽象类调用抽象方法是没有任何意义的。
	* 
7）抽象类是存在构造方法的，其构造方法是提供给子类创建对象时侯初始化夫类的属性的



Abstract可以修饰方法、类
修饰类时，抽象类：
	* 
修饰符必须放在类名前；
	* 
将不能生成对象实例；
	* 
可以作为对象变量声明的类型，也就是编译时的类型；
	* 
抽象类中的抽象方法需要子类继承并覆盖。


修饰方法时，抽象方法：
	* 
只声明、未实现；
	* 
要求子类覆盖这个方法；
	* 
子类不是抽象类的时候，调用抽象方法是以多态的方式来调用子类实现(覆盖)后的方法。

